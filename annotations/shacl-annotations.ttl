PREFIX schema: <https://schema.org/>
PREFIX sh: <http://www.w3.org/ns/shacl#>

sh:
    schema:description "This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language."@en ;
    schema:name "W3C Shapes Constraint Language (SHACL) Vocabulary"@en ;
.

sh:AbstractResult
    schema:description "The base class of validation results, typically not instantiated directly."@en ;
    schema:name "Abstract result"@en ;
.

sh:AndConstraintComponent
    schema:description "A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes."@en ;
    schema:name "And constraint component"@en ;
.

sh:BlankNode
    schema:description "The node kind of all blank nodes."@en ;
    schema:name "Blank node"@en ;
.

sh:BlankNodeOrIRI
    schema:description "The node kind of all blank nodes or IRIs."@en ;
    schema:name "Blank node or IRI"@en ;
.

sh:BlankNodeOrLiteral
    schema:description "The node kind of all blank nodes or literals."@en ;
    schema:name "Blank node or literal"@en ;
.

sh:ClassConstraintComponent
    schema:description "A constraint component that can be used to verify that each value node is an instance of a given type."@en ;
    schema:name "Class constraint component"@en ;
.

sh:ClosedConstraintComponent
    schema:description "A constraint component that can be used to indicate that focus nodes must only have values for those properties that have been explicitly enumerated via sh:property/sh:path."@en ;
    schema:name "Closed constraint component"@en ;
.

sh:ConstraintComponent
    schema:description "The class of constraint components."@en ;
    schema:name "Constraint component"@en ;
.

sh:DatatypeConstraintComponent
    schema:description "A constraint component that can be used to restrict the datatype of all value nodes."@en ;
    schema:name "Datatype constraint component"@en ;
.

sh:DisjointConstraintComponent
    schema:description "A constraint component that can be used to verify that the set of value nodes is disjoint with the the set of nodes that have the focus node as subject and the value of a given property as predicate."@en ;
    schema:name "Disjoint constraint component"@en ;
.

sh:EqualsConstraintComponent
    schema:description "A constraint component that can be used to verify that the set of value nodes is equal to the set of nodes that have the focus node as subject and the value of a given property as predicate."@en ;
    schema:name "Equals constraint component"@en ;
.

sh:ExpressionConstraintComponent
    schema:description "A constraint component that can be used to verify that a given node expression produces true for all value nodes."@en ;
    schema:name "Expression constraint component"@en ;
.

sh:Function
    schema:description "The class of SHACL functions."@en ;
    schema:name "Function"@en ;
.

sh:HasValueConstraintComponent
    schema:description "A constraint component that can be used to verify that one of the value nodes is a given RDF node."@en ;
    schema:name "Has-value constraint component"@en ;
.

sh:IRI
    schema:description "The node kind of all IRIs."@en ;
    schema:name "IRI"@en ;
.

sh:IRIOrLiteral
    schema:description "The node kind of all IRIs or literals."@en ;
    schema:name "IRI or literal"@en ;
.

sh:InConstraintComponent
    schema:description "A constraint component that can be used to exclusively enumerate the permitted value nodes."@en ;
    schema:name "In constraint component"@en ;
.

sh:Info
    schema:description "The severity for an informational validation result."@en ;
    schema:name "Info"@en ;
.

sh:JSConstraint
    schema:description "The class of constraints backed by a JavaScript function."@en ;
    schema:name "JavaScript-based constraint"@en ;
.

sh:JSConstraintComponent
    schema:description "A constraint component with the parameter sh:js linking to a sh:JSConstraint containing a sh:script."@en ;
    schema:name "JavaScript constraint component"@en ;
.

sh:JSExecutable
    schema:description "Abstract base class of resources that declare an executable JavaScript."@en ;
    schema:name "JavaScript executable"@en ;
.

sh:JSFunction
    schema:description "The class of SHACL functions that execute a JavaScript function when called."@en ;
    schema:name "JavaScript function"@en ;
.

sh:JSLibrary
    schema:description "Represents a JavaScript library, typically identified by one or more URLs of files to include."@en ;
    schema:name "JavaScript library"@en ;
.

sh:JSRule
    schema:description "The class of SHACL rules expressed using JavaScript."@en ;
    schema:name "JavaScript rule"@en ;
.

sh:JSTarget
    schema:description "The class of targets that are based on JavaScript functions."@en ;
    schema:name "JavaScript target"@en ;
.

sh:JSTargetType
    schema:description "The (meta) class for parameterizable targets that are based on JavaScript functions."@en ;
    schema:name "JavaScript target type"@en ;
.

sh:JSValidator
    schema:description "A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used."@en ;
    schema:name "JavaScript validator"@en ;
.

sh:LanguageInConstraintComponent
    schema:description "A constraint component that can be used to enumerate language tags that all value nodes must have."@en ;
    schema:name "Language-in constraint component"@en ;
.

sh:LessThanConstraintComponent
    schema:description "A constraint component that can be used to verify that each value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate."@en ;
    schema:name "Less-than constraint component"@en ;
.

sh:LessThanOrEqualsConstraintComponent
    schema:description "A constraint component that can be used to verify that every value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate."@en ;
    schema:name "less-than-or-equals constraint component"@en ;
.

sh:Literal
    schema:description "The node kind of all literals."@en ;
    schema:name "Literal"@en ;
.

sh:MaxCountConstraintComponent
    schema:description "A constraint component that can be used to restrict the maximum number of value nodes."@en ;
    schema:name "Max-count constraint component"@en ;
.

sh:MaxExclusiveConstraintComponent
    schema:description "A constraint component that can be used to restrict the range of value nodes with a maximum exclusive value."@en ;
    schema:name "Max-exclusive constraint component"@en ;
.

sh:MaxInclusiveConstraintComponent
    schema:description "A constraint component that can be used to restrict the range of value nodes with a maximum inclusive value."@en ;
    schema:name "Max-inclusive constraint component"@en ;
.

sh:MaxLengthConstraintComponent
    schema:description "A constraint component that can be used to restrict the maximum string length of value nodes."@en ;
    schema:name "Max-length constraint component"@en ;
.

sh:MinCountConstraintComponent
    schema:description "A constraint component that can be used to restrict the minimum number of value nodes."@en ;
    schema:name "Min-count constraint component"@en ;
.

sh:MinExclusiveConstraintComponent
    schema:description "A constraint component that can be used to restrict the range of value nodes with a minimum exclusive value."@en ;
    schema:name "Min-exclusive constraint component"@en ;
.

sh:MinInclusiveConstraintComponent
    schema:description "A constraint component that can be used to restrict the range of value nodes with a minimum inclusive value."@en ;
    schema:name "Min-inclusive constraint component"@en ;
.

sh:MinLengthConstraintComponent
    schema:description "A constraint component that can be used to restrict the minimum string length of value nodes."@en ;
    schema:name "Min-length constraint component"@en ;
.

sh:NodeConstraintComponent
    schema:description "A constraint component that can be used to verify that all value nodes conform to the given node shape."@en ;
    schema:name "Node constraint component"@en ;
.

sh:NodeKind
    schema:description "The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral."@en ;
    schema:name "Node kind"@en ;
.

sh:NodeKindConstraintComponent
    schema:description "A constraint component that can be used to restrict the RDF node kind of each value node."@en ;
    schema:name "Node-kind constraint component"@en ;
.

sh:NodeShape
    schema:description "A node shape is a shape that specifies constraint that need to be met with respect to focus nodes."@en ;
    schema:name "Node shape"@en ;
.

sh:NotConstraintComponent
    schema:description "A constraint component that can be used to verify that value nodes do not conform to a given shape."@en ;
    schema:name "Not constraint component"@en ;
.

sh:OrConstraintComponent
    schema:description "A constraint component that can be used to restrict the value nodes so that they conform to at least one out of several provided shapes."@en ;
    schema:name "Or constraint component"@en ;
.

sh:Parameter
    schema:description "The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics."@en ;
    schema:name "Parameter"@en ;
.

sh:Parameterizable
    schema:description "Superclass of components that can take parameters, especially functions and constraint components."@en ;
    schema:name "Parameterizable"@en ;
.

sh:PatternConstraintComponent
    schema:description "A constraint component that can be used to verify that every value node matches a given regular expression."@en ;
    schema:name "Pattern constraint component"@en ;
.

sh:PrefixDeclaration
    schema:description "The class of prefix declarations, consisting of pairs of a prefix with a namespace."@en ;
    schema:name "Prefix declaration"@en ;
.

sh:PropertyConstraintComponent
    schema:description "A constraint component that can be used to verify that all value nodes conform to the given property shape."@en ;
    schema:name "Property constraint component"@en ;
.

sh:PropertyGroup
    schema:description "Instances of this class represent groups of property shapes that belong together."@en ;
    schema:name "Property group"@en ;
.

sh:PropertyShape
    schema:description "A property shape is a shape that specifies constraints on the values of a focus node for a given property or path."@en ;
    schema:name "Property shape"@en ;
.

sh:QualifiedMaxCountConstraintComponent
    schema:description "A constraint component that can be used to verify that a specified maximum number of value nodes conforms to a given shape."@en ;
    schema:name "Qualified-max-count constraint component"@en ;
.

sh:QualifiedMinCountConstraintComponent
    schema:description "A constraint component that can be used to verify that a specified minimum number of value nodes conforms to a given shape."@en ;
    schema:name "Qualified-min-count constraint component"@en ;
.

sh:ResultAnnotation
    schema:description "A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result."@en ;
    schema:name "Result annotation"@en ;
.

sh:Rule
    schema:description "The class of SHACL rules. Never instantiated directly."@en ;
    schema:name "Rule"@en ;
.

sh:SPARQLAskExecutable
    schema:description "The class of SPARQL executables that are based on an ASK query."@en ;
    schema:name "SPARQL ASK executable"@en ;
.

sh:SPARQLAskValidator
    schema:description "The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms."@en ;
    schema:name "SPARQL ASK validator"@en ;
.

sh:SPARQLConstraint
    schema:description "The class of constraints based on SPARQL SELECT queries."@en ;
    schema:name "SPARQL constraint"@en ;
.

sh:SPARQLConstraintComponent
    schema:description "A constraint component that can be used to define constraints based on SPARQL queries."@en ;
    schema:name "SPARQL constraint component"@en ;
.

sh:SPARQLConstructExecutable
    schema:description "The class of SPARQL executables that are based on a CONSTRUCT query."@en ;
    schema:name "SPARQL CONSTRUCT executable"@en ;
.

sh:SPARQLExecutable
    schema:description "The class of resources that encapsulate a SPARQL query."@en ;
    schema:name "SPARQL executable"@en ;
.

sh:SPARQLFunction
    schema:description "A function backed by a SPARQL query - either ASK or SELECT."@en ;
    schema:name "SPARQL function"@en ;
.

sh:SPARQLRule
    schema:description "The class of SHACL rules based on SPARQL CONSTRUCT queries."@en ;
    schema:name "SPARQL CONSTRUCT rule"@en ;
.

sh:SPARQLSelectExecutable
    schema:description "The class of SPARQL executables based on a SELECT query."@en ;
    schema:name "SPARQL SELECT executable"@en ;
.

sh:SPARQLSelectValidator
    schema:description "The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform."@en ;
    schema:name "SPARQL SELECT validator"@en ;
.

sh:SPARQLTarget
    schema:description "The class of targets that are based on SPARQL queries."@en ;
    schema:name "SPARQL target"@en ;
.

sh:SPARQLTargetType
    schema:description "The (meta) class for parameterizable targets that are based on SPARQL queries."@en ;
    schema:name "SPARQL target type"@en ;
.

sh:SPARQLUpdateExecutable
    schema:description "The class of SPARQL executables based on a SPARQL UPDATE."@en ;
    schema:name "SPARQL UPDATE executable"@en ;
.

sh:Severity
    schema:description "The class of validation result severity levels, including violation and warning levels."@en ;
    schema:name "Severity"@en ;
.

sh:Shape
    schema:description "A shape is a collection of constraints that may be targeted for certain nodes."@en ;
    schema:name "Shape"@en ;
.

sh:Target
    schema:description "The base class of targets such as those based on SPARQL queries."@en ;
    schema:name "Target"@en ;
.

sh:TargetType
    schema:description "The (meta) class for parameterizable targets.	Instances of this are instantiated as values of the sh:target property."@en ;
    schema:name "Target type"@en ;
.

sh:TripleRule
    schema:name "A rule based on triple (subject, predicate, object) pattern."@en ;
.

sh:UniqueLangConstraintComponent
    schema:description "A constraint component that can be used to specify that no pair of value nodes may use the same language tag."@en ;
    schema:name "Unique-languages constraint component"@en ;
.

sh:ValidationReport
    schema:description "The class of SHACL validation reports."@en ;
    schema:name "Validation report"@en ;
.

sh:ValidationResult
    schema:description "The class of validation results."@en ;
    schema:name "Validation result"@en ;
.

sh:Validator
    schema:description "The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations."@en ;
    schema:name "Validator"@en ;
.

sh:Violation
    schema:description "The severity for a violation validation result."@en ;
    schema:name "Violation"@en ;
.

sh:Warning
    schema:description "The severity for a warning validation result."@en ;
    schema:name "Warning"@en ;
.

sh:XoneConstraintComponent
    schema:description "A constraint component that can be used to restrict the value nodes so that they conform to exactly one out of several provided shapes."@en ;
    schema:name "Exactly one constraint component"@en ;
.

sh:alternativePath
    schema:description "The (single) value of this property must be a list of path elements, representing the elements of alternative paths."@en ;
    schema:name "alternative path"@en ;
.

sh:and
    schema:description "RDF list of shapes to validate the value nodes against."@en ;
    schema:name "and"@en ;
.

sh:annotationProperty
    schema:description "The annotation property that shall be set."@en ;
    schema:name "annotation property"@en ;
.

sh:annotationValue
    schema:description "The (default) values of the annotation property."@en ;
    schema:name "annotation value"@en ;
.

sh:annotationVarName
    schema:description "The name of the SPARQL variable from the SELECT clause that shall be used for the values."@en ;
    schema:name "annotation variable name"@en ;
.

sh:ask
    schema:description "The SPARQL ASK query to execute."@en ;
    schema:name "ask"@en ;
.

sh:class
    schema:description "The type that all value nodes must have."@en ;
    schema:name "class"@en ;
.

sh:closed
    schema:description "If set to true then the shape is closed."@en ;
    schema:name "closed"@en ;
.

sh:condition
    schema:description "The shapes that the focus nodes need to conform to before a rule is executed on them."@en ;
    schema:name "condition"@en ;
.

sh:conforms
    schema:description "True if the validation did not produce any validation results, and false otherwise."@en ;
    schema:name "conforms"@en ;
.

sh:construct
    schema:description "The SPARQL CONSTRUCT query to execute."@en ;
    schema:name "construct"@en ;
.

sh:datatype
    schema:description "Specifies an RDF datatype that all value nodes must have."@en ;
    schema:name "datatype"@en ;
.

sh:deactivated
    schema:description "If set to true then all nodes conform to this."@en ;
    schema:name "deactivated"@en ;
.

sh:declare
    schema:description "Links a resource with its namespace prefix declarations."@en ;
    schema:name "declare"@en ;
.

sh:defaultValue
    schema:description "A default value for a property, for example for user interface tools to pre-populate input fields."@en ;
    schema:name "default value"@en ;
.

sh:description
    schema:description "Human-readable descriptions for the property in the context of the surrounding shape."@en ;
    schema:name "description"@en ;
.

sh:detail
    schema:description "Links a result with other results that provide more details, for example to describe violations against nested shapes."@en ;
    schema:name "detail"@en ;
.

sh:disjoint
    schema:description "Specifies a property where the set of values must be disjoint with the value nodes."@en ;
    schema:name "disjoint"@en ;
.

sh:entailment
    schema:description "An entailment regime that indicates what kind of inferencing is required by a shapes graph."@en ;
    schema:name "entailment"@en ;
.

sh:equals
    schema:description "Specifies a property that must have the same values as the value nodes."@en ;
    schema:name "equals"@en ;
.

sh:expression
    schema:description "The node expression that must return true for the value nodes."@en ;
    schema:name "expression"@en ;
.

sh:filterShape
    schema:description "The shape that all input nodes of the expression need to conform to."@en ;
    schema:name "filter shape"@en ;
.

sh:flags
    schema:description "An optional flag to be used with regular expression pattern matching."@en ;
    schema:name "flags"@en ;
.

sh:focusNode
    schema:description "The focus node that was validated when the result was produced."@en ;
    schema:name "focus node"@en ;
.

sh:group
    schema:description "Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes."@en ;
    schema:name "group"@en ;
.

sh:hasValue
    schema:description "Specifies a value that must be among the value nodes."@en ;
    schema:name "has value"@en ;
.

sh:ignoredProperties
    schema:description "An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path."@en ;
    schema:name "ignored properties"@en ;
.

sh:in
    schema:description "Specifies a list of allowed values so that each value node must be among the members of the given list."@en ;
    schema:name "in"@en ;
.

sh:intersection
    schema:description "A list of node expressions that shall be intersected."@en ;
    schema:name "intersection"@en ;
.

sh:inversePath
    schema:description "The (single) value of this property represents an inverse path (object to subject)."@en ;
    schema:name "inverse path"@en ;
.

sh:js
    schema:description "Constraints expressed in JavaScript." ;
    schema:name "JavaScript constraint"@en ;
.

sh:jsFunctionName
    schema:description "The name of the JavaScript function to execute."@en ;
    schema:name "JavaScript function name"@en ;
.

sh:jsLibrary
    schema:description "Declares which JavaScript libraries are needed to execute this."@en ;
    schema:name "JavaScript library"@en ;
.

sh:jsLibraryURL
    schema:description "Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files."@en ;
    schema:name "JavaScript library URL"@en ;
.

sh:labelTemplate
    schema:description "Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter."@en ;
    schema:name "label template"@en ;
.

sh:languageIn
    schema:description "Specifies a list of language tags that all value nodes must have."@en ;
    schema:name "language in"@en ;
.

sh:lessThan
    schema:description "Specifies a property that must have smaller values than the value nodes."@en ;
    schema:name "less than"@en ;
.

sh:lessThanOrEquals
    schema:description "Specifies a property that must have smaller or equal values than the value nodes."@en ;
    schema:name "less than or equals"@en ;
.

sh:maxCount
    schema:description "Specifies the maximum number of values in the set of value nodes."@en ;
    schema:name "max count"@en ;
.

sh:maxExclusive
    schema:description "Specifies the maximum exclusive value of each value node."@en ;
    schema:name "max exclusive"@en ;
.

sh:maxInclusive
    schema:description "Specifies the maximum inclusive value of each value node."@en ;
    schema:name "max inclusive"@en ;
.

sh:maxLength
    schema:description "Specifies the maximum string length of each value node."@en ;
    schema:name "max length"@en ;
.

sh:message
    schema:description "A human-readable message (possibly with placeholders for variables) explaining the cause of the result."@en ;
    schema:name "message"@en ;
.

sh:minCount
    schema:description "Specifies the minimum number of values in the set of value nodes."@en ;
    schema:name "min count"@en ;
.

sh:minExclusive
    schema:description "Specifies the minimum exclusive value of each value node."@en ;
    schema:name "min exclusive"@en ;
.

sh:minInclusive
    schema:description "Specifies the minimum inclusive value of each value node."@en ;
    schema:name "min inclusive"@en ;
.

sh:minLength
    schema:description "Specifies the minimum string length of each value node."@en ;
    schema:name "min length"@en ;
.

sh:name
    schema:description "Human-readable labels for the property in the context of the surrounding shape."@en ;
    schema:name "name"@en ;
.

sh:namespace
    schema:description "The namespace associated with a prefix in a prefix declaration."@en ;
    schema:name "namespace"@en ;
.

sh:node
    schema:description "Specifies the node shape that all value nodes must conform to."@en ;
    schema:name "node"@en ;
.

sh:nodeKind
    schema:description "Specifies the node kind (e.g. IRI or literal) each value node."@en ;
    schema:name "node kind"@en ;
.

sh:nodeValidator
    schema:description "The validator(s) used to evaluate a constraint in the context of a node shape."@en ;
    schema:name "shape validator"@en ;
.

sh:nodes
    schema:description "The node expression producing the input nodes of a filter shape expression."@en ;
    schema:name "nodes"@en ;
.

sh:not
    schema:description "Specifies a shape that the value nodes must not conform to."@en ;
    schema:name "not"@en ;
.

sh:object
    schema:description "An expression producing the nodes that shall be inferred as objects."@en ;
    schema:name "object"@en ;
.

sh:oneOrMorePath
    schema:description "The (single) value of this property represents a path that is matched one or more times."@en ;
    schema:name "one or more path"@en ;
.

sh:optional
    schema:description "Indicates whether a parameter is optional."@en ;
    schema:name "optional"@en ;
.

sh:or
    schema:description "Specifies a list of shapes so that the value nodes must conform to at least one of the shapes."@en ;
    schema:name "or"@en ;
.

sh:order
    schema:description "Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second."@en ;
    schema:name "order"@en ;
.

sh:parameter
    schema:description "The parameters of a function or constraint component."@en ;
    schema:name "parameter"@en ;
.

sh:path
    schema:description "Specifies the property path of a property shape."@en ;
    schema:name "path"@en ;
.

sh:pattern
    schema:description "Specifies a regular expression pattern that the string representations of the value nodes must match."@en ;
    schema:name "pattern"@en ;
.

sh:predicate
    schema:description "An expression producing the properties that shall be inferred as predicates."@en ;
    schema:name "predicate"@en ;
.

sh:prefix
    schema:description "The prefix of a prefix declaration."@en ;
    schema:name "prefix"@en ;
.

sh:prefixes
    schema:description "The prefixes that shall be applied before parsing the associated SPARQL query."@en ;
    schema:name "prefixes"@en ;
.

sh:property
    schema:description "Links a shape to its property shapes."@en ;
    schema:name "property"@en ;
.

sh:propertyValidator
    schema:description "The validator(s) used to evaluate a constraint in the context of a property shape."@en ;
    schema:name "property validator"@en ;
.

sh:qualifiedMaxCount
    schema:description "The maximum number of value nodes that can conform to the shape."@en ;
    schema:name "qualified max count"@en ;
.

sh:qualifiedMinCount
    schema:description "The minimum number of value nodes that must conform to the shape."@en ;
    schema:name "qualified min count"@en ;
.

sh:qualifiedValueShape
    schema:description "The shape that a specified number of values must conform to."@en ;
    schema:name "qualified value shape"@en ;
.

sh:qualifiedValueShapesDisjoint
    schema:description "Can be used to mark the qualified value shape to be disjoint with its sibling shapes."@en ;
    schema:name "qualified value shapes disjoint"@en ;
.

sh:result
    schema:description "The validation results contained in a validation report."@en ;
    schema:name "result"@en ;
.

sh:resultAnnotation
    schema:description "Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query."@en ;
    schema:name "result annotation"@en ;
.

sh:resultMessage
    schema:description "Human-readable messages explaining the cause of the result."@en ;
    schema:name "result message"@en ;
.

sh:resultPath
    schema:description "The path of a validation result, based on the path of the validated property shape."@en ;
    schema:name "result path"@en ;
.

sh:resultSeverity
    schema:description "The severity of the result, e.g. warning."@en ;
    schema:name "result severity"@en ;
.

sh:returnType
    schema:description "The expected type of values returned by the associated function."@en ;
    schema:name "return type"@en ;
.

sh:rule
    schema:description "The rules linked to a shape."@en ;
    schema:name "rule"@en ;
.

sh:select
    schema:description "The SPARQL SELECT query to execute."@en ;
    schema:name "select"@en ;
.

sh:severity
    schema:description "Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation."@en ;
    schema:name "severity"@en ;
.

sh:shapesGraph
    schema:description "Shapes graphs that should be used when validating this data graph."@en ;
    schema:name "shapes graph"@en ;
.

sh:shapesGraphWellFormed
    schema:description "If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process."@en ;
    schema:name "shapes graph well-formed"@en ;
.

sh:sourceConstraint
    schema:description "The constraint that was validated when the result was produced."@en ;
    schema:name "source constraint"@en ;
.

sh:sourceConstraintComponent
    schema:description "The constraint component that is the source of the result."@en ;
    schema:name "source constraint component"@en ;
.

sh:sourceShape
    schema:description "The shape that is was validated when the result was produced."@en ;
    schema:name "source shape"@en ;
.

sh:sparql
    schema:description "Links a shape with SPARQL constraints."@en ;
    schema:name "constraint (in SPARQL)"@en ;
.

sh:subject
    schema:description "An expression producing the resources that shall be inferred as subjects."@en ;
    schema:name "subject"@en ;
.

sh:suggestedShapesGraph
    schema:description "Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements."@en ;
    schema:name "suggested shapes graph"@en ;
.

sh:target
    schema:description "Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget."@en ;
    schema:name "target"@en ;
.

sh:targetClass
    schema:description "Links a shape to a class, indicating that all instances of the class must conform to the shape."@en ;
    schema:name "target class"@en ;
.

sh:targetNode
    schema:description "Links a shape to individual nodes, indicating that these nodes must conform to the shape."@en ;
    schema:name "target node"@en ;
.

sh:targetObjectsOf
    schema:description "Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape."@en ;
    schema:name "target objects of"@en ;
.

sh:targetSubjectsOf
    schema:description "Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape."@en ;
    schema:name "target subjects of"@en ;
.

sh:this
    schema:description "A node expression that represents the current focus node."@en ;
    schema:name "this"@en ;
.

sh:union
    schema:description "A list of node expressions that shall be used together."@en ;
    schema:name "union"@en ;
.

sh:uniqueLang
    schema:description "Specifies whether all node values must have a unique (or no) language tag."@en ;
    schema:name "unique languages"@en ;
.

sh:update
    schema:description "The SPARQL UPDATE to execute."@en ;
    schema:name "update"@en ;
.

sh:validator
    schema:description "The validator(s) used to evaluate constraints of either node or property shapes."@en ;
    schema:name "validator"@en ;
.

sh:value
    schema:description "An RDF node that has caused the result."@en ;
    schema:name "value"@en ;
.

sh:xone
    schema:description "Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes."@en ;
    schema:name "exactly one"@en ;
.

sh:zeroOrMorePath
    schema:description "The (single) value of this property represents a path that is matched zero or more times."@en ;
    schema:name "zero or more path"@en ;
.

sh:zeroOrOnePath
    schema:description "The (single) value of this property represents a path that is matched zero or one times."@en ;
    schema:name "zero or one path"@en ;
.
